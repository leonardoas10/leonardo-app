{
    "page": {
        "title": "Arquitectura",
        "description": "Este sitio web utiliza Next.js para renderizado del lado del servidor para optimizar el rendimiento SEO, AWS Amplify para operaciones backend sin servidor rentables, y DynamoDB para una recuperaci√≥n de datos r√°pida y escalable con latencia m√≠nima.",
        "githubRepository": "Repositorio GitHub",
        "architectureDiagram": "Diagrama",
        "diagramPlaceholder": "[Marcador de Posici√≥n para Diagrama de Arquitectura]"
    },
    "tabs": {
        "frontend": {
            "label": "Frontend",
            "sections": {
                "framework": {
                    "title": "üöÄ Framework",
                    "content": "El frontend est√° construido con Next.js 14 utilizando la arquitectura App Router. Los componentes est√°n organizados siguiendo los principios de dise√±o at√≥mico, con elementos UI reutilizables y componentes espec√≠ficos para cada p√°gina."
                },
                "ui": {
                    "title": "üé® Componentes IU",
                    "content": "Material UI proporciona un sistema de dise√±o consistente con componentes responsivos que se adaptan a cualquier tama√±o de pantalla. El sistema de temas permite un cambio fluido entre modo claro y oscuro."
                },
                "typeSafety": {
                    "title": "üìù Seguridad de Tipos",
                    "content": "TypeScript garantiza la seguridad de tipos en todo el c√≥digo, reduciendo errores en tiempo de ejecuci√≥n y mejorando la productividad del desarrollador."
                }
            }
        },
        "backend": {
            "label": "Backend",
            "sections": {
                "hosting": {
                    "title": "‚òÅÔ∏è Alojamiento",
                    "content": "El backend utiliza AWS Amplify para alojamiento y despliegue continuo. Las rutas API en Next.js proporcionan funciones serverless para manejar el procesamiento de datos e integraciones con terceros."
                },
                "authentication": {
                    "title": "üîí Autenticaci√≥n",
                    "content": "La autenticaci√≥n se maneja a trav√©s de AWS Cognito, proporcionando gesti√≥n segura de usuarios y control de acceso."
                },
                "contentDelivery": {
                    "title": "üåê Entrega de Contenido",
                    "content": "Se utiliza CloudFront CDN para la entrega de contenido, asegurando tiempos de carga r√°pidos a nivel global."
                }
            }
        },
        "database": {
            "label": "Base de Datos",
            "sections": {
                "nosql": {
                    "title": "üìä Base de Datos NoSQL",
                    "content": "Los datos se almacenan en Amazon DynamoDB, un servicio de base de datos NoSQL que proporciona un rendimiento r√°pido y predecible con escalabilidad perfecta."
                },
                "storage": {
                    "title": "üóÑÔ∏è Almacenamiento",
                    "content": "Se utilizan buckets S3 para almacenar activos est√°ticos como im√°genes y documentos, con una configuraci√≥n CORS adecuada para garantizar un acceso seguro."
                },
                "performance": {
                    "title": "‚ö° Rendimiento",
                    "content": "Los patrones de acceso a datos est√°n optimizados para consultas comunes, con √≠ndices apropiados para garantizar una recuperaci√≥n eficiente."
                }
            }
        },
        "cicd": {
            "label": "CI/CD",
            "sections": {
                "amplify": {
                    "title": "üîÑ Amplify CI/CD",
                    "content": "AWS Amplify proporciona un flujo de trabajo CI/CD completamente gestionado que construye, prueba y despliega autom√°ticamente la aplicaci√≥n en cada push de c√≥digo. Esto elimina los pasos de despliegue manual, asegura entornos consistentes y permite despliegues de ramas de caracter√≠sticas para pruebas antes de fusionar a producci√≥n."
                },
                "husky": {
                    "title": "ü™ù Hooks Git de Husky",
                    "content": "Husky se implementa para hacer cumplir los est√°ndares de calidad del c√≥digo mediante la ejecuci√≥n de hooks pre-commit y pre-push. Estos hooks ejecutan autom√°ticamente linters, verificaci√≥n de tipos y pruebas unitarias antes de permitir commits o pushes, evitando que c√≥digo problem√°tico entre en el repositorio."
                },
                "github": {
                    "title": "üè∑Ô∏è GitHub Actions para PRs",
                    "content": "GitHub Actions etiqueta autom√°ticamente las pull requests seg√∫n su contenido (por ejemplo, \"feature\", \"bugfix\", \"documentation\") y ejecuta flujos de trabajo de validaci√≥n. Esto mejora la organizaci√≥n de PRs, facilita la priorizaci√≥n de revisiones de c√≥digo y asegura que todos los cambios cumplan con los est√°ndares de calidad antes de fusionarse."
                }
            }
        }
    }
}
